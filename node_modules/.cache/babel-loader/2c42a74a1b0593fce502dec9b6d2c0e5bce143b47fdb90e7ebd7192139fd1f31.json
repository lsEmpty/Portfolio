{"ast":null,"code":"/* Terminal Components */\nimport TerminalComponent from \"@/components/terminal.vue\";\nimport RedirectMessage from \"@/components/guie-message.vue\";\n\n/* Profile components */\nimport BiographyComponent from \"@/components/components-profile/biography.vue\";\nimport SpecialtiesComponent from \"@/components/components-profile/specialties.vue\";\nimport ProjectsComponent from \"@/components/components-profile/projects.vue\";\n\n/* Button Profile Components*/\nimport ButtonUpComponent from \"@/components/components-profile/button-up.vue\";\nexport default {\n  name: 'PrincipalPageView',\n  data() {\n    return {\n      showImage: false,\n      //Dependiendo de esta variable se mostrará o no el botón para abrir la terminal\n      showTerminal: false,\n      //Dependiendo de esta variable se mostrará o no la terminal\n      inProfileComponent: false,\n      //Variable que estará en true si se está en un profile component, en caso de presionar el ButtonUp para subir a la terminal se colocará en false\n      section: 'secondary',\n      //Variable que cambiará si se presiona el ButtonUp para subir a la terminal, en caso de ser presionado cambiará a 'principal'\n      showProfileComponents: [false, false, false],\n      //Lista que cambiará cada profile según el indice que se seleccione en el nav terminal\n      showGuieMessage: false //Dependiendo de esta variable se mostrará o no el GuieMessage\n    };\n  },\n  methods: {\n    // Function que muestra el componente de ImageTerminal para el botón\n    ShowImageTerminal: function () {\n      this.showImage = true;\n    },\n    // Function que muestra el componente de la terminal\n    ShowTerminal: function () {\n      this.showImage = false;\n      this.showTerminal = true;\n      this.showGuieMessage = true;\n    },\n    // Function que recibe un $emit, se cierra la terminal y se cierran todos los ProfileComponents\n    closeTerminal(value) {\n      if (!value) {\n        this.showTerminal = false;\n        this.showProfileComponents = [false, false, false];\n      }\n    },\n    // Function que hace focus a la terminal tomando la ref y haciendo el focus\n    focusTerminal() {\n      if (this.showTerminal) {\n        this.$refs.terminal.focusNavTerminal();\n      }\n    },\n    removeFocusTerminal() {\n      this.$refs.terminal.removeFocusNavTerminal();\n    },\n    // Before, Enter and Leave are to the animations \n    beforeEnter(el) {\n      el.style.opacity = 0;\n    },\n    enter(el, done) {\n      // Para asegurar que el modal esté visible antes de hacer la transición\n      el.offsetHeight; // Trigger a reflow\n      el.style.transition = 'opacity 0.3s ease';\n      el.style.opacity = 1;\n      done();\n    },\n    leave(el, done) {\n      el.style.transition = 'opacity 0.3s ease';\n      el.style.opacity = 0;\n      setTimeout(() => {\n        done();\n        if (!this.showTerminal) {\n          this.showImage = true;\n        }\n      }, 300); // El tiempo debe coincidir con la duración de la transición\n    },\n    // Function que muestra el Profile según lo que mandé el el componente de nav terminal\n    showItemProfile(values) {\n      // Recibe el componente la lista con el indice que se accionó y se pasa ese valor a showProfileComponent para mostrar el que se seleccionó\n      this.showProfileComponents = values;\n    },\n    // Funcction que se ejecutá cuando se acciona el botón de ButtonUp y cuando hay alguna update en la funcion verifyShowProfile\n    SectionsScroll(section) {\n      // En caso de ser secondary significa que se accionó algún item de nav-terminal\n      if (section == 'secondary') {\n        // Scroll down\n        this.ScrollToComponent(\"SecondarySection\");\n        this.showGuieMessage = false;\n        this.inProfileComponent = true; // Como se encuentra en un ProfileComponent se asigna a true\n      } else if (section == 'principal') {\n        // Se acciona cuando se ejecuta el botón de ButtonUp\n        // Scroll up\n        this.section = section;\n        this.ScrollToComponent(\"PrincipalSection\");\n        this.section = 'secondary';\n        this.showGuieMessage = true;\n        this.inProfileComponent = false; // Como se encuentra en la section de la terminal inProfileComponent pasa a ser falso\n      }\n    },\n    ScrollToComponent(ref) {\n      this.$refs[ref].scrollIntoView({\n        behavior: \"smooth\",\n        // Scroll suave\n        block: \"start\" // Alinea al inicio del componente\n      });\n      // Toma el contenido de la variable antes de comenzar el timeout\n      let section = this.section;\n      setTimeout(() => {\n        // En caso de que se haya presionado el botón de ButtonUp se hará focus a la navegator terminal\n        if (section == 'principal') {\n          this.focusTerminal();\n        }\n      }, 500);\n    },\n    // Function que verificará si se va a redireccionar para un ProfileComponent\n    verifyShowProfile() {\n      let acumulador = 0;\n      this.showProfileComponents.forEach(value => {\n        if (value == false) {\n          acumulador++;\n        }\n      });\n      // Esta condicional se coloca para evitar un error del updated ya que se ejecuta de forma indeceada, \n      // es para verificar que se haya seleccionado algún item de nav-terminal \n      if (acumulador != 3 && this.section == 'secondary') {\n        // Cuando se encuentre en un Prifile Item se removerá el focus que tiene el nav-terminal para no poder modificar la terminal desde ahí\n        this.removeFocusTerminal();\n        this.SectionsScroll(this.section);\n      }\n\n      // En caso de que no se muestre la terminal retirar el mensaje de guia Ctrl + M\n      if (!this.showTerminal) {\n        this.showGuieMessage = false;\n      }\n    }\n  },\n  mounted() {\n    this.ShowImageTerminal();\n  },\n  components: {\n    TerminalComponent,\n    RedirectMessage,\n    BiographyComponent,\n    SpecialtiesComponent,\n    ProjectsComponent,\n    ButtonUpComponent\n  },\n  updated() {\n    // Cada vez que se haga un updated se ejecutará todo lo que está acá dentro\n    this.verifyShowProfile();\n  }\n};","map":{"version":3,"names":["TerminalComponent","RedirectMessage","BiographyComponent","SpecialtiesComponent","ProjectsComponent","ButtonUpComponent","name","data","showImage","showTerminal","inProfileComponent","section","showProfileComponents","showGuieMessage","methods","ShowImageTerminal","ShowTerminal","closeTerminal","value","focusTerminal","$refs","terminal","focusNavTerminal","removeFocusTerminal","removeFocusNavTerminal","beforeEnter","el","style","opacity","enter","done","offsetHeight","transition","leave","setTimeout","showItemProfile","values","SectionsScroll","ScrollToComponent","ref","scrollIntoView","behavior","block","verifyShowProfile","acumulador","forEach","mounted","components","updated"],"sources":["C:\\Users\\danid\\Portfolio\\src\\views\\PrincipalPage.vue"],"sourcesContent":["<template>\r\n    <!-- Div que contiene toda el contenido -->\r\n    <div class=\"all-content\">\r\n        <!-- Div que muestra el contenido del a section terminal -->\r\n        <div class=\"terminal-content-show\" @click=\"focusTerminal\" ref=\"PrincipalSection\">\r\n            <!-- Div que muestra el contenido de la terminal sea el Button Terminal o la Terminal -->\r\n            <div class=\"terminal\">\r\n                <img v-if=\"showImage\" src=\"@/assets/terminal.png\" alt=\"Show\" class=\"terminal-image\"\r\n                    @click=\"ShowTerminal\">\r\n                <transition name=\"fade\" @before-enter=\"beforeEnter\" @enter=\"enter\" @leave=\"leave\">\r\n                    <div v-if=\"showTerminal\" class=\"terminal\">\r\n                        <TerminalComponent :inProfileComponent=\"inProfileComponent\" @closeTerminal=\"closeTerminal\"\r\n                            @showItemProfile=\"showItemProfile\" ref=\"terminal\">\r\n                        </TerminalComponent>\r\n                    </div>\r\n                </transition>\r\n            </div>\r\n            <!-- Componente que mostrará un mensaje de guia -->\r\n            <transition name=\"fade\" @before-enter=\"beforeEnter\" @enter=\"enter\" @leave=\"leave\">\r\n                <RedirectMessage v-if=\"showGuieMessage\"></RedirectMessage>\r\n            </transition>\r\n        </div>\r\n        <!-- Div que mostrará cada una de los profile items -->\r\n        <div class=\"profile-items\" ref=\"SecondarySection\">\r\n            <BiographyComponent v-if=\"showProfileComponents[0]\"></BiographyComponent>\r\n            <SpecialtiesComponent v-if=\"showProfileComponents[1]\"></SpecialtiesComponent>\r\n            <ProjectsComponent v-if=\"showProfileComponents[2]\"></ProjectsComponent>\r\n            <transition name=\"fade\" @before-enter=\"beforeEnter\" @enter=\"enter\" @leave=\"leave\">\r\n                <ButtonUpComponent v-if=\"inProfileComponent\" @clickButtonUp=\"SectionsScroll\"></ButtonUpComponent>\r\n            </transition>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n/* Terminal Components */\r\nimport TerminalComponent from \"@/components/terminal.vue\"\r\nimport RedirectMessage from \"@/components/guie-message.vue\";\r\n\r\n/* Profile components */\r\nimport BiographyComponent from \"@/components/components-profile/biography.vue\";\r\nimport SpecialtiesComponent from \"@/components/components-profile/specialties.vue\";\r\nimport ProjectsComponent from \"@/components/components-profile/projects.vue\";\r\n\r\n/* Button Profile Components*/\r\nimport ButtonUpComponent from \"@/components/components-profile/button-up.vue\";\r\n\r\nexport default {\r\n    name: 'PrincipalPageView',\r\n    data() {\r\n        return {\r\n            showImage: false, //Dependiendo de esta variable se mostrará o no el botón para abrir la terminal\r\n            showTerminal: false, //Dependiendo de esta variable se mostrará o no la terminal\r\n            inProfileComponent: false, //Variable que estará en true si se está en un profile component, en caso de presionar el ButtonUp para subir a la terminal se colocará en false\r\n            section: 'secondary', //Variable que cambiará si se presiona el ButtonUp para subir a la terminal, en caso de ser presionado cambiará a 'principal'\r\n            showProfileComponents: [false, false, false], //Lista que cambiará cada profile según el indice que se seleccione en el nav terminal\r\n            showGuieMessage: false, //Dependiendo de esta variable se mostrará o no el GuieMessage\r\n        }\r\n    },\r\n    methods: {\r\n        // Function que muestra el componente de ImageTerminal para el botón\r\n        ShowImageTerminal: function () {\r\n            this.showImage = true;\r\n        },\r\n        // Function que muestra el componente de la terminal\r\n        ShowTerminal: function () {\r\n            this.showImage = false;\r\n            this.showTerminal = true;\r\n            this.showGuieMessage = true;\r\n        },\r\n        // Function que recibe un $emit, se cierra la terminal y se cierran todos los ProfileComponents\r\n        closeTerminal(value) {\r\n            if (!value) {\r\n                this.showTerminal = false;\r\n                this.showProfileComponents = [false, false, false];\r\n            }\r\n        },\r\n        // Function que hace focus a la terminal tomando la ref y haciendo el focus\r\n        focusTerminal() {\r\n            if (this.showTerminal) {\r\n                this.$refs.terminal.focusNavTerminal();\r\n            }\r\n        },\r\n        removeFocusTerminal() {\r\n            this.$refs.terminal.removeFocusNavTerminal();\r\n        },\r\n        // Before, Enter and Leave are to the animations \r\n        beforeEnter(el) {\r\n            el.style.opacity = 0;\r\n        },\r\n        enter(el, done) {\r\n            // Para asegurar que el modal esté visible antes de hacer la transición\r\n            el.offsetHeight; // Trigger a reflow\r\n            el.style.transition = 'opacity 0.3s ease';\r\n            el.style.opacity = 1;\r\n            done();\r\n        },\r\n        leave(el, done) {\r\n            el.style.transition = 'opacity 0.3s ease';\r\n            el.style.opacity = 0;\r\n            setTimeout(() => {\r\n                done();\r\n                if (!this.showTerminal) {\r\n                    this.showImage = true;\r\n                }\r\n            }, 300); // El tiempo debe coincidir con la duración de la transición\r\n        },\r\n        // Function que muestra el Profile según lo que mandé el el componente de nav terminal\r\n        showItemProfile(values) {\r\n            // Recibe el componente la lista con el indice que se accionó y se pasa ese valor a showProfileComponent para mostrar el que se seleccionó\r\n            this.showProfileComponents = values;\r\n        },\r\n        // Funcction que se ejecutá cuando se acciona el botón de ButtonUp y cuando hay alguna update en la funcion verifyShowProfile\r\n        SectionsScroll(section) {\r\n            // En caso de ser secondary significa que se accionó algún item de nav-terminal\r\n            if (section == 'secondary') {\r\n                // Scroll down\r\n                this.ScrollToComponent(\"SecondarySection\");\r\n                this.showGuieMessage = false;\r\n                this.inProfileComponent = true; // Como se encuentra en un ProfileComponent se asigna a true\r\n            } else if (section == 'principal') { // Se acciona cuando se ejecuta el botón de ButtonUp\r\n                // Scroll up\r\n                this.section = section;\r\n                this.ScrollToComponent(\"PrincipalSection\");\r\n                this.section = 'secondary';\r\n                this.showGuieMessage = true;\r\n                this.inProfileComponent = false; // Como se encuentra en la section de la terminal inProfileComponent pasa a ser falso\r\n            }\r\n        },\r\n        ScrollToComponent(ref) {\r\n            this.$refs[ref].scrollIntoView({\r\n                behavior: \"smooth\", // Scroll suave\r\n                block: \"start\", // Alinea al inicio del componente\r\n            });\r\n            // Toma el contenido de la variable antes de comenzar el timeout\r\n            let section = this.section;\r\n            setTimeout(() => {\r\n                // En caso de que se haya presionado el botón de ButtonUp se hará focus a la navegator terminal\r\n                if (section == 'principal') {\r\n                    this.focusTerminal();\r\n                }\r\n            }, 500);\r\n        },\r\n        // Function que verificará si se va a redireccionar para un ProfileComponent\r\n        verifyShowProfile() {\r\n            let acumulador = 0;\r\n            this.showProfileComponents.forEach(value => {\r\n                if (value == false) {\r\n                    acumulador++;\r\n                }\r\n            });\r\n            // Esta condicional se coloca para evitar un error del updated ya que se ejecuta de forma indeceada, \r\n            // es para verificar que se haya seleccionado algún item de nav-terminal \r\n            if (acumulador != 3 && this.section == 'secondary') {\r\n                // Cuando se encuentre en un Prifile Item se removerá el focus que tiene el nav-terminal para no poder modificar la terminal desde ahí\r\n                this.removeFocusTerminal()\r\n                this.SectionsScroll(this.section);\r\n            }\r\n\r\n            // En caso de que no se muestre la terminal retirar el mensaje de guia Ctrl + M\r\n            if (!this.showTerminal) {\r\n                this.showGuieMessage = false;\r\n            }\r\n        }\r\n    },\r\n    mounted() {\r\n        this.ShowImageTerminal();\r\n    },\r\n    components: {\r\n        TerminalComponent,\r\n        RedirectMessage,\r\n        BiographyComponent,\r\n        SpecialtiesComponent,\r\n        ProjectsComponent,\r\n        ButtonUpComponent\r\n    },\r\n    updated() {\r\n        // Cada vez que se haga un updated se ejecutará todo lo que está acá dentro\r\n        this.verifyShowProfile();\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.terminal-content-show {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    height: 100vh;\r\n}\r\n\r\n.terminal-image {\r\n    margin-top: -30px;\r\n    height: 80px;\r\n    cursor: pointer;\r\n    transition: transform 0.2s ease;\r\n}\r\n\r\n.terminal-image:hover {\r\n    transform: scale(1.05);\r\n}\r\n\r\n.terminal-image:active {\r\n    transform: scale(1.00);\r\n}\r\n\r\n.fade-enter-active,\r\n.fade-leave-active {\r\n    transition: opacity 0.5s ease-in-out;\r\n    /* Ajusta el tiempo aquí */\r\n}\r\n\r\n.fade-enter,\r\n.fade-leave-to\r\n\r\n/* .fade-leave-active in versions <2.1.8 */\r\n    {\r\n    opacity: 0;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}