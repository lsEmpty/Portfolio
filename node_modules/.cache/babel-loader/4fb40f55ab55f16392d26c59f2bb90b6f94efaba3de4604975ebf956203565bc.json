{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createElementVNode as _createElementVNode, vModelText as _vModelText, withKeys as _withKeys, withDirectives as _withDirectives, createTextVNode as _createTextVNode } from \"vue\";\nconst _hoisted_1 = [\"innerHTML\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: \"terminal\",\n    id: \"terminal\",\n    onClick: _cache[4] || (_cache[4] = (...args) => $options.focusInput && $options.focusInput(...args))\n  }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.output, (line, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      innerHTML: line,\n      class: \"contenido\"\n    }, null, 8, _hoisted_1);\n  }), 128)), _cache[5] || (_cache[5] = _createElementVNode(\"span\", {\n    style: {\n      \"color\": \"#8f3f38\"\n    },\n    class: \"contenido\"\n  }, \"danid\", -1)), _cache[6] || (_cache[6] = _createTextVNode()), _cache[7] || (_cache[7] = _createElementVNode(\"span\", {\n    style: {\n      \"color\": \"#2d4663\"\n    },\n    class: \"contenido\"\n  }, \"~\\\\Desktop\\\\Portfolio\", -1)), _withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.input = $event),\n    onKeydown: [_cache[1] || (_cache[1] = _withKeys((...args) => $options.executeCommand && $options.executeCommand(...args), [\"enter\"])), _cache[3] || (_cache[3] = (...args) => $options.handleEvent && $options.handleEvent(...args))],\n    ref: \"inputField\",\n    class: \"input\",\n    rows: \"1\",\n    onInput: _cache[2] || (_cache[2] = (...args) => $options.adjustHeight && $options.adjustHeight(...args))\n  }, null, 544), [[_vModelText, $data.input]])]);\n}","map":{"version":3,"names":["_createElementBlock","class","id","onClick","_cache","args","$options","focusInput","_Fragment","_renderList","$data","output","line","index","key","innerHTML","_hoisted_1","_createElementVNode","style","_createTextVNode","$event","input","onKeydown","_withKeys","executeCommand","handleEvent","ref","rows","onInput","adjustHeight"],"sources":["C:\\Users\\danid\\Portfolio\\src\\components\\commands.vue"],"sourcesContent":["<template>\r\n    <div class=\"terminal\" id=\"terminal\" @click=\"focusInput\">\r\n        <div v-for=\"(line, index) in output\" :key=\"index\" v-html=\"line\" class=\"contenido\"></div>\r\n        <span style=\"color: #8f3f38;\" class=\"contenido\">danid</span> <span style=\"color: #2d4663;\"\r\n            class=\"contenido\">~\\Desktop\\Portfolio</span>\r\n        <textarea v-model=\"input\" @keydown.enter=\"executeCommand\" ref=\"inputField\" class=\"input\" rows=\"1\"\r\n            @input=\"adjustHeight\" @keydown=\"handleEvent\"></textarea>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    name: 'CommandsComponent',\r\n    data() {\r\n        return {\r\n            input: '> ',\r\n            output: []\r\n        }\r\n    },\r\n    methods: {\r\n        focusInput() {\r\n            this.$refs.inputField.focus(); // Enfoca el textarea al hacer clic en la consola\r\n        },\r\n        executeCommand(event) {\r\n            const command = this.input.trim().substring(2);\r\n            event.preventDefault();\r\n            if (command != '') {\r\n                this.input = '> ';\r\n                this.output.push(`<span style=\"color: #853693;\">></span><span style=\"color: #fdff90;\"> ${command}</span>`);\r\n                const terminal = document.getElementById('terminal');\r\n                terminal.style.overflowY = 'auto';\r\n                this.commands(command.toLowerCase(), terminal);\r\n                this.$nextTick(() => {\r\n                    const inputField = this.$refs.inputField;\r\n                    if (inputField) {\r\n                        const terminal = inputField.parentElement;\r\n                        terminal.scrollTop = terminal.scrollHeight;\r\n                    }\r\n                });\r\n            }\r\n        }, adjustHeight() {\r\n            const textarea = this.$refs.inputField;\r\n            textarea.style.height = 'auto'; // Restablece la altura\r\n            textarea.style.height = `${textarea.scrollHeight}px`; // Ajusta la altura al contenido\r\n            if (this.input.length > 200) {\r\n                textarea.value = this.input.substring(0, 200);\r\n            }\r\n        },\r\n        handleEvent(event) {\r\n            const textarea = this.$refs.inputField;\r\n            // Evita que el usuario borre el símbolo \">\"\r\n            if (this.input.length <= 2 && event.key === 'Backspace') {\r\n                event.preventDefault(); // Previene la acción de borrar\r\n            } else if (textarea.value.length === 2 && event.key === ' ') { // Evita que el usuario pueda colocar espacios antes de colocar algún caracter\r\n                event.preventDefault();\r\n            } else {\r\n                let textAreaLength = textarea.value.length;\r\n                // Evita que el usuario pueda colocar mas de un espacio\r\n                if (textarea.value.substring(textAreaLength - 1) === ' ' && event.key === ' ') {\r\n                    event.preventDefault()\r\n                }\r\n            }\r\n\r\n        },\r\n        simulateBackspace() {\r\n            if (this.input.length > 0) {\r\n                this.input = this.input.slice(0, -1); // Elimina el último carácter del input\r\n            }\r\n        },\r\n        commands(command, terminal) {\r\n            switch (command) {\r\n                case 'discord':\r\n                    this.output.push(`<i class=\"bi bi-discord\" style=\"color: #5865F2;\"></i> <span style=\"color:#5865F2;\">Discord: formateado</span>`);\r\n                    break;\r\n                case 'clear':\r\n                    terminal.style.overflowY = 'unset';\r\n                    this.output = [];\r\n                    break;\r\n                case 'cls':\r\n                    terminal.style.overflowY = 'unset';\r\n                    this.output = [];\r\n                    break;\r\n                case 'navegator':\r\n                    this.$emit('NavegatorTerminal', true, false);\r\n                    break;\r\n                case 'exit':\r\n                    this.$emit('ExitTerminal', false);\r\n                    break;\r\n                default:\r\n                    this.errorCommand(command);\r\n                    break;\r\n            }\r\n        },\r\n        // Methods defined in the \r\n        errorCommand(command) {\r\n            let words = command.split('');\r\n            let initCommand = \"\";\r\n            let flag = true;\r\n            words.forEach(element => {\r\n                if (element != ' ' && flag) {\r\n                    initCommand += element;\r\n                } else {\r\n                    flag = false;\r\n                }\r\n            });\r\n            this.output.push(`<span style=\"color:#E96A5E;\">${initCommand}: The term '${initCommand}' is not recognized as the name of an executable function.<br>Check the spelling of the name and try again.</span>`);\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.contenido {\r\n    font-family: \"Playpen Sans\", cursive;\r\n    font-size: 17px;\r\n    font-optical-sizing: auto;\r\n\r\n    /**/\r\n    word-wrap: break-word;\r\n    /* Permite que las palabras largas se rompan */\r\n    white-space: pre-wrap;\r\n    /* Mantiene los espacios y saltos de línea */\r\n}\r\n\r\n.terminal {\r\n    height: 70vh;\r\n    border-radius: 0 0 10px 10px;\r\n    background-color: #1C2639;\r\n    padding: 10px 10px 0 10px;\r\n}\r\n\r\n.input {\r\n    width: 100%;\r\n    border: none;\r\n    outline: none;\r\n    color: #fdff90;\r\n    background: transparent;\r\n    resize: none;\r\n    font-family: \"Playpen Sans\", cursive;\r\n    font-size: 17px;\r\n    font-optical-sizing: auto;\r\n}\r\n\r\n/* Estilos para el scrollbar en WebKit */\r\n.terminal::-webkit-scrollbar {\r\n    width: 0px;\r\n}\r\n</style>\r\n"],"mappings":";mBAAA;;uBACIA,mBAAA,CAMM;IANDC,KAAK,EAAC,UAAU;IAACC,EAAE,EAAC,UAAU;IAAEC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,UAAA,IAAAD,QAAA,CAAAC,UAAA,IAAAF,IAAA,CAAU;yBAClDL,mBAAA,CAAwFQ,SAAA,QAFhGC,WAAA,CAEqCC,KAAA,CAAAC,MAAM,EAF3C,CAEqBC,IAAI,EAAEC,KAAK;yBAAxBb,mBAAA,CAAwF;MAAlDc,GAAG,EAAED,KAAK;MAAEE,SAAa,EAALH,IAAI;MAAEX,KAAK,EAAC;gBAF9Ee,UAAA;uCAGQC,mBAAA,CAA4D;IAAtDC,KAAuB,EAAvB;MAAA;IAAA,CAAuB;IAACjB,KAAK,EAAC;KAAY,OAAK,Q,0BAH7DkB,gBAAA,K,0BAGqEF,mBAAA,CACb;IADmBC,KAAuB,EAAvB;MAAA;IAAA,CAAuB;IACtFjB,KAAK,EAAC;KAAY,uBAAmB,Q,gBACzCgB,mBAAA,CAC4D;IANpE,uBAAAb,MAAA,QAAAA,MAAA,MAAAgB,MAAA,IAK2BV,KAAA,CAAAW,KAAK,GAAAD,MAAA;IAAGE,SAAO,G,0BAL1CC,SAAA,KAAAlB,IAAA,KAKkDC,QAAA,CAAAkB,cAAA,IAAAlB,QAAA,CAAAkB,cAAA,IAAAnB,IAAA,CAAc,e,uCACpBC,QAAA,CAAAmB,WAAA,IAAAnB,QAAA,CAAAmB,WAAA,IAAApB,IAAA,CAAW,E;IADWqB,GAAG,EAAC,YAAY;IAACzB,KAAK,EAAC,OAAO;IAAC0B,IAAI,EAAC,GAAG;IAC5FC,OAAK,EAAAxB,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAuB,YAAA,IAAAvB,QAAA,CAAAuB,YAAA,IAAAxB,IAAA,CAAY;gCADLK,KAAA,CAAAW,KAAK,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}